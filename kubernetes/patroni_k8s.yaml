# headless service to avoid deletion of patroni-test-config endpoint
apiVersion: v1
kind: Service
metadata:
  name: patroni-test-config
  labels:
    application: patroni
    cluster-name: patroni-test
spec:
  clusterIP: None
---
apiVersion: v1
kind: Endpoints
metadata:
  name: &cluster_name patroni-test
  labels:
    application: patroni
    cluster-name: *cluster_name
subsets: []
---
apiVersion: v1
kind: Service
metadata:
  name: &cluster_name patroni-test
  labels:
    application: patroni
    cluster-name: *cluster_name
    role: master
spec:
  type: ClusterIP
  selector:
    application: patroni
    cluster-name: *cluster_name
    role: master
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: patronidemo-repl
  labels:
    application: patroni
    cluster-name:  &cluster_name patroni-test
    role: replica
spec:
  type: ClusterIP
  selector:
    application: patroni
    cluster-name: *cluster_name
    role: replica
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Secret
metadata:
  name: &cluster_name patroni-test
  labels:
    application: patroni
    cluster-name: *cluster_name
type: Opaque
data:
  superuser-password: cG9zdGdyZXM=
  replication-password: cG9zdGdyZXMtcGFzcw==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: patroni-test
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: patroni-test
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete and deletecollection are required only for 'patronictl remove'
  - delete
  - deletecollection
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - create
  - list
  - watch
  # delete and deletecollection are required only for for 'patronictl remove'
  - delete
  - deletecollection
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: patroni-test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: patroni-test
subjects:
- kind: ServiceAccount
  name: patroni-test
---
apiVersion: v1
kind: Pod
metadata:
  name: patroni-test-pod-node01
  labels:
    application: patroni
    cluster-name: &cluster_name patroni-test
spec:
  serviceAccountName: patroni-test
  containers:
    - name: *cluster_name
      image: kimutansk/patroni-on-k8s
      imagePullPolicy: IfNotPresent
      readinessProbe:
        httpGet:
          scheme: HTTP
          path: /readiness
          port: 8008
        initialDelaySeconds: 3
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
      ports:
      - containerPort: 8008
        protocol: TCP
      - containerPort: 5432
        protocol: TCP
      volumeMounts:
      - mountPath: /home/postgres/pgdata
        name: pgdata
      env:
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'false'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{application: patroni, cluster-name: patroni-test}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: postgres
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: superuser-password
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: replication-password
        - name: PATRONI_SCOPE
          value: *cluster_name
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /home/postgres/pgdata/pgroot/data
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
  terminationGracePeriodSeconds: 0
  volumes:
    - name: pgdata
      persistentVolumeClaim:
        claimName: patroni-pvc-node01
        readOnly: false
  nodeSelector:
    node: "node01"
---
apiVersion: v1
kind: Pod
metadata:
  name: patroni-test-pod-node02
  labels:
    application: patroni
    cluster-name: &cluster_name patroni-test
spec:
  serviceAccountName: patroni-test
  containers:
    - name: *cluster_name
      image: kimutansk/patroni-on-k8s
      imagePullPolicy: IfNotPresent
      readinessProbe:
        httpGet:
          scheme: HTTP
          path: /readiness
          port: 8008
        initialDelaySeconds: 3
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
      ports:
      - containerPort: 8008
        protocol: TCP
      - containerPort: 5432
        protocol: TCP
      volumeMounts:
      - mountPath: /home/postgres/pgdata
        name: pgdata
      env:
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'false'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{application: patroni, cluster-name: patroni-test}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: postgres
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: superuser-password
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: replication-password
        - name: PATRONI_SCOPE
          value: *cluster_name
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /home/postgres/pgdata/pgroot/data
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
  terminationGracePeriodSeconds: 0
  volumes:
    - name: pgdata
      persistentVolumeClaim:
        claimName: patroni-pvc-node02
        readOnly: false
  nodeSelector:
    node: "node02"
---
apiVersion: v1
kind: Pod
metadata:
  name: patroni-test-pod-node03
  labels:
    application: patroni
    cluster-name: &cluster_name patroni-test
spec:
  serviceAccountName: patroni-test
  containers:
    - name: *cluster_name
      image: kimutansk/patroni-on-k8s
      imagePullPolicy: IfNotPresent
      readinessProbe:
        httpGet:
          scheme: HTTP
          path: /readiness
          port: 8008
        initialDelaySeconds: 3
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
      ports:
      - containerPort: 8008
        protocol: TCP
      - containerPort: 5432
        protocol: TCP
      volumeMounts:
      - mountPath: /home/postgres/pgdata
        name: pgdata
      env:
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'false'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{application: patroni, cluster-name: patroni-test}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: postgres
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: superuser-password
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: replication-password
        - name: PATRONI_SCOPE
          value: *cluster_name
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /home/postgres/pgdata/pgroot/data
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
  terminationGracePeriodSeconds: 0
  volumes:
    - name: pgdata
      persistentVolumeClaim:
        claimName: patroni-pvc-node03
        readOnly: false
  nodeSelector:
    node: "node03"
